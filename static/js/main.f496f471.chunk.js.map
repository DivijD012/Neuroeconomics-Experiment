{"version":3,"sources":["assets/success.svg","assets/failure.svg","app/components/Answer/answer-style.js","app/styles/theme.js","app/components/Answer/Answer.js","app/utils/css-transition.js","app/components/Result/result-style.js","app/components/Result/Result.js","app/components/Question/question-style.js","app/components/Question/Question.js","app/app-style.js","app/models/services/questions/local/data/questionsData.js","app/models/services/questions/local/get-questions.js","app/models/factories/get-questions-factory.js","app/components/CircularLoading.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","theme","answerContainer","answer","margin","userSelect","answerTypography","fontSize","display","cursor","createMuiTheme","palette","primary","light","lightGreen","main","dark","contrastText","secondary","gray","Answer","React","Component","constructor","arguments","onAnswerClick","e","preventDefault","this","props","onAnswerSelect","answerIndex","render","classes","createElement","MuiThemeProvider","className","Radio","id","toString","color","checked","isSelected","onClick","Typography","component","withStyles","elem","CSSTransitionGroup","transitionName","transitionAppear","transitionEnterTimeout","transitionAppearTimeout","transitionLeave","transitionLeaveTimeout","svgContainer","width","height","border","transform","position","top","left","resultSVG","resultParagraph","textAlign","resetButton","Result","getSuccessMessage","concat","result","correctAnswers","questionsLength","getFailMessage","console","log","addCssTransition","src","pass","successSvg","failureSvg","alt","Button","variant","tryAgainPressed","questionStyle","questionParagraph","font","fontWeight","marginBottom","overflowX","overflowY","marginTop","questionNumber","QuestionParagraph","question","paper","mixins","gutters","paddingTop","spacing","paddingBottom","marginRight","btnNext","right","btnPrev","btnPrevSubmit","btnSubmit","logo","questions","answers","correctAnswerIndex","Promise","resolve","setTimeout","i","questionsData","push","getQuestions","server","length","undefined","LocalQuestions","useStyles","makeStyles","progress","progressContainer","CircularLoading","CircularProgress","size","App","super","lastTimeButtonClicked","Date","getTime","jsonOutput","onNextClick","thisTime","currentState","state","timeDiff","timestring","currentQuestionIndex","areButtonsAnimating","questionsAnswers","input_value","route","setState","showMultiple","updatePage","onPrevClick","onSubmitClick","getRandomId","makeid","jsonString","JSON","stringify","blob","Blob","type","downloadLink","document","href","URL","createObjectURL","download","click","revokeObjectURL","onTryAgainPressed","async","onAnswerSelected","answerId","clickedAnswerIndex","currentAnswers","userAnswerIndexes","updateButtonsPos","questionsLoaded","buttons","Array","from","getElementById","children","mainContainer","forEach","button","style","bottom","bottomPosition","clientHeight","scrollHeight","questionIndex","scrollTop","handleInputChange","event","target","value","getCurrentQuestion","getCurrentAnswers","isAnswerSelected","shouldShowSubmit","shouldShowNext","shouldShowNext2","isNumeric","shouldShowPrev","componentDidUpdate","componentDidMount","window","addEventListener","questionsFactory","then","characters","charactersLength","counter","charAt","Math","floor","random","now","index","num","isNaN","trim","Paper","elevation","key","map","currentAnswer","onChange","htmlFor","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,oLCa5BC,MAbAC,IAAK,CAChBC,gBAAiB,GACjBC,OAAQ,CACJC,OAAQ,oBACRC,WAAY,QAEhBC,iBAAkB,CACdC,SAAU,OACVC,QAAS,eACTC,OAAQ,a,0CCaDR,MAjBDS,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,MAAOC,IAAW,KAClBC,KAAMD,IAAW,KACjBE,KAAMF,IAAW,KACjBG,aAAc,QAElBC,UAAW,CACPL,MAAOM,IAAK,KACZJ,KAAMI,IAAK,KACXH,KAAMG,IAAK,KACXF,aAAc,WCP1B,MAAMG,UAAeC,IAAMC,UAAUC,cAAA,SAAAC,WAAA,KACjCC,cAAgBC,IACZA,EAAEC,iBACFC,KAAKC,MAAMC,eAAeF,KAAKC,MAAME,cAGzCC,SACI,MAAM,QAAEC,GAAYL,KAAKC,MAEzB,OACIR,IAAAa,cAACC,IAAgB,CAAClC,MAAOA,GACrBoB,IAAAa,cAAA,OAAKE,UAAWH,EAAQ9B,QACpBkB,IAAAa,cAACG,IAAK,CACFC,GAAIV,KAAKC,MAAME,YAAYQ,WAC3BC,MAAO,UACPC,QAASb,KAAKC,MAAMa,WACpBC,QAASf,KAAKH,gBAElBJ,IAAAa,cAACU,IAAU,CAACR,UAAWH,EAAQ3B,iBAAkBuC,UAAU,IAAIF,QAASf,KAAKH,eACxEG,KAAKC,MAAM1B,WAQrB2C,kBAAW9C,EAAX8C,CAAmB1B,G,QClCnB2B,KAEP1B,IAAAa,cAACc,qBAAkB,CACfC,eAAe,UACfC,kBAAkB,EAClBC,uBAAwB,IACxBC,wBAAyB,IACzBC,iBAAiB,EACjBC,uBAAwB,KAEvBP,GCaE/C,MA1BAC,IAAK,CAChBsD,aAAc,CACVC,MAAO,MACPC,OAAQ,QACRrD,OAAQ,SACRsD,OAAQ,MACRC,UAAW,wBACXC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNzD,WAAY,QAEhB0D,UAAW,CACPN,OAAQ,OACRD,MAAO,OACPpD,OAAQ,UAEZ4D,gBAAiB,CACbC,UAAW,UAEfC,YAAa,CACT1D,QAAS,QACTJ,OAAQ,e,kCCVhB,MAAM+D,UAAe9C,IAAMC,UAAUC,cAAA,SAAAC,WAAA,KACjC4C,kBAAoB,IACV,aAANC,OAAoBzC,KAAKC,MAAMyC,OAAOC,eAAc,OAAAF,OAAMzC,KAAKC,MAAMyC,OAAOE,gBAAe,YAC7F,KAEFC,eAAiB,IACP,WAANJ,OAAkBzC,KAAKC,MAAMyC,OAAOC,eAAc,OAAAF,OAAMzC,KAAKC,MAAMyC,OAAOE,gBAAe,YAG7FxC,SACI,MAAM,QAAEC,GAAYL,KAAKC,MAEzB,OADA6C,QAAQC,IAAI/C,KAAKC,OAEbR,IAAAa,cAACC,IAAgB,CAAClC,MAAOA,GACpB2E,EACGvD,IAAAa,cAAA,OAAKE,UAAWH,EAAQsB,cACpBlC,IAAAa,cAAA,OACI2C,IAAKjD,KAAKC,MAAMyC,OAAOQ,KAAOC,IAAaC,IAC3C5C,UAAWH,EAAQ8B,UACnBkB,IAAI,SAER5D,IAAAa,cAAA,OAAKE,UAAWH,EAAQ+B,iBACnBpC,KAAKC,MAAMyC,OAAOQ,KAAOlD,KAAKwC,oBAAsBxC,KAAK6C,kBAG9DpD,IAAAa,cAACgD,IAAM,CACHC,QAAQ,YACR/C,UAAWH,EAAQiC,YACnBvB,QAASf,KAAKC,MAAMuD,gBACpB5C,MAAM,aACT,iBAUVM,kBAAWuC,EAAXvC,CAA0BqB,GCpC1BnE,MAhBAC,IAAK,CAChBqF,kBAAmB,CACfC,KAAM,kBACNC,WAAY,OACZjF,SAAU,OACVkF,aAAc,MACdC,UAAW,OACXC,UAAW,SACXC,UAAW,OAEfC,eAAgB,CACZD,UAAW,OACXH,aAAc,UCJtB,MAAMK,UAA0BzE,IAAMC,UAClCU,SACI,MAAM,QAAEC,GAAYL,KAAKC,MAEzB,OACIR,IAAAa,cAACC,IAAgB,CAAClC,MAAOA,GACpB2E,EACGvD,IAAAa,cAAA,WAIIb,IAAAa,cAAA,OAAKE,UAAWH,EAAQqD,mBAAoB1D,KAAKC,MAAMkE,cAQhEjD,kBAAWuC,EAAXvC,CAA0BgD,GCkB1B9F,MA7CAC,IAAK,CAChB+F,MAAO,CACH3F,WAAY,OACZqF,UAAW,YACRzF,EAAMgG,OAAOC,UAChBC,WAAYlG,EAAMmG,QAAQ,GAC1BC,cAAe,OACfzC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNwC,YAAa,OACb3C,UAAW,wBACXH,MAAO,MACPC,OAAQ,OAEZ8C,QAAS,CACLnG,OAAQH,EAAMmG,UACdR,UAAW,OACXhC,SAAU,WACV4C,MAAO,IAEXC,QAAS,CACLrG,OAAQH,EAAMmG,UACdR,UAAW,OACXhC,SAAU,WACV4C,MAAO,KAEXE,cAAe,CACXtG,OAAQH,EAAMmG,UACdR,UAAW,OACXhC,SAAU,WACV4C,MAAO,KAEXG,UAAW,CACPvG,OAAQH,EAAMmG,UACdR,UAAW,OACXhC,SAAU,WACV4C,MAAO,IAEXI,KAAM,CACFvG,WAAY,OACZuF,UAAW,SCwKJiB,MAjNG,CACd,CAEId,SAAS,qIAGTe,QAAS,CAAC,OACVC,mBAAoB,GAExB,CAEIhB,SAAS,2FAETe,QAAS,CAAC,OACVC,mBAAoB,GAExB,CAEIhB,SAAS,oGAETe,QAAS,CAAC,OACVC,mBAAoB,GAExB,CAEIhB,SAAS,8DAETe,QAAQ,GAGRC,mBAAoB,GAExB,CAEIhB,SAAS,kQAGTe,QAAQ,CACJ,wBACA,yBACA,0BACA,2BACA,0BAEJC,mBAAoB,GAExB,CAEIhB,SAAS,8EAETe,QAAQ,CACJ,MACA,MAEJC,mBAAoB,GAExB,CAEIhB,SAAS,kFAETe,QAAQ,CACJ,MACA,MAEJC,mBAAoB,GAExB,CAEIhB,SAAS,qZAMTe,QAAS,CACL,sCACA,YAEJC,mBAAoB,GAExB,CAGIhB,SAAS,mWAMTe,QAAS,CACL,WACA,OAEJC,mBAAoB,GAExB,CAIIhB,SAAS,mTAKTe,QAAS,GAGTC,mBAAoB,GAExB,CAIIhB,SAAS,yTAKTe,QAAS,CACL,MACA,MAEJC,mBAAoB,GAExB,CAIIhB,SAAS,wRAKTe,QAAS,GAGTC,mBAAoB,GAExB,CAGIhB,SAAS,2WAMTe,QAAS,CACL,WACA,OAEJC,mBAAoB,GAExB,CAIIhB,SAAS,mTAKTe,QAAS,GAGTC,mBAAoB,GAExB,CAIIhB,SAAS,yTAKTe,QAAS,CACL,MACA,MAEJC,mBAAoB,GAExB,CAIIhB,SAAS,wRAKTe,QAAS,GAGTC,mBAAoB,GAExB,CAGIhB,SAAS,+GAGTe,QAAS,GAGTC,mBAAoB,IC1Mb,MACJ,IAAIC,QAAQC,IACfC,WAAW,KACP,MACML,EAAY,GAElB,IAAK,IAAIM,EAAI,EAAGA,EAHQ,GAGaA,IAAK,CACtC,MAAMpB,EAAW,CACbA,SAAUqB,EAAcD,GAAGpB,SAC3Be,QAASM,EAAcD,GAAGL,QAC1BK,KAGJN,EAAUQ,KAAKtB,GAGnBkB,EACIJ,IASL,QClBIS,MATM,WAAoB,IAAnBC,EAAM/F,UAAAgG,OAAA,QAAAC,IAAAjG,UAAA,GAAAA,UAAA,GAAG,KAC3B,IAAI+F,EAIA,OAAOG,K,gBCDf,MAAMC,EAAYC,YAAW3H,IAAK,CAC9B4H,SAAU,CACNzH,OAAQH,EAAMmG,QAAQ,IAE1B0B,kBAAmB,CACflE,SAAU,WACVC,IAAK,MACLC,KAAM,MACNwC,YAAa,OACb3C,UAAW,4BAgBJoE,MAZf,WACI,MAAM9F,EAAU0F,IAEhB,OACItG,IAAAa,cAACC,IAAgB,CAAClC,MAAOA,GACrBoB,IAAAa,cAAA,OAAKE,UAAWH,EAAQ6F,mBACpBzG,IAAAa,cAAC8F,IAAgB,CAACC,KAAM,IAAK7F,UAAWH,EAAQ4F,cCFhE,MAAMK,UAAY7G,IAAMC,UAMpBC,YAAYM,GACRsG,MAAMtG,GAEN,KARJuG,uBAAwB,IAAIC,MAAOC,UAAU,KAC7CC,WAAa,GAEZ,KAiGDC,YAAc9G,IACV,IAAI+G,GAAW,IAAIJ,MAAOC,UAC1B,MAAMI,EAAe9G,KAAK+G,MACpBC,GAAYH,EAAW7G,KAAKwG,uBAAyB,IAC3D,IAAIS,EAAaH,EAAaI,qBAAuB,QACjDJ,EAAaI,uBAAyBJ,EAAa7B,UAAUW,OAAS,GAAK5F,KAAKmH,wBAIR,IAAxE3B,EAAcsB,EAAaI,sBAAsB/B,mBACjDnF,KAAK2G,WAAWG,EAAaI,sBAAwBlH,KAAK+G,MAAMK,iBAAiBpH,KAAK+G,MAAMG,sBAE5FlH,KAAK2G,WAAWG,EAAaI,sBAAwBlH,KAAK+G,MAAMM,YACpErH,KAAK2G,WAAWM,GAAcD,EAC9BF,EAAaI,qBAAuBlH,KAAKsH,MAAMR,EAAaI,sBAC5DlH,KAAKuH,SAAS,CAAE,YAAe,KAC6C,IAAxE/B,EAAcsB,EAAaI,sBAAsB/B,mBACjDnF,KAAKuH,SAAS,CAAEC,cAAc,IAE9BxH,KAAKuH,SAAS,CAAEC,cAAc,IAElCxH,KAAKyH,WAAWX,EAAaI,wBAC/B,KAEFQ,YAAc5H,IACV,MAAMgH,EAAe9G,KAAK+G,MAEgB,IAAtCD,EAAaI,sBAA8BlH,KAAKmH,uBAIpDnH,KAAKyH,aAAaX,EAAaI,uBACjC,KAEFS,cAAgB7H,IAQZ,IAAI8H,EAAc5H,KAAK6H,OAAO,IAC9BD,GAAe,QACf,MAAME,EAAaC,KAAKC,UAAUhI,KAAK2G,WAAY,KAAM,GACnDsB,EAAO,IAAIC,KAAK,CAACJ,GAAa,CAAEK,KAAM,qBACtCC,EAAeC,SAAS/H,cAAc,KAC5C8H,EAAaE,KAAOC,IAAIC,gBAAgBP,GACxCG,EAAaK,SAAWb,EACxBQ,EAAaM,QACbH,IAAII,gBAAgBP,EAAaE,OAKnC,KAEFM,kBAAoBC,UAChB7I,KAAKuH,SAAS,CACVtC,UAAW,KACXmC,iBAAkB,GAClBF,qBAAsB,EACtBxE,OAAQ,OAGZ1C,KAAKuH,SAAS,CACVtC,gBAAiBS,OAEvB,KAEFoD,iBAAmBC,IACf,IAAIC,EAAqBD,EACrBjC,EAAe9G,KAAK+G,MACxB,MAAMkC,EAAiBjJ,KAAK+G,MAAMK,iBAClC6B,EAAenC,EAAaI,sBAAwB8B,EAEpDhJ,KAAKuH,SAAS,CACV2B,kBAAmBD,KAEzB,KAEFE,iBAAmB,KACf,IAAKnJ,KAAKoJ,kBACN,OAAO,EAGX,IAAIC,EAAUC,MAAMC,KAAKlB,SAASmB,eAAe,oBAAoBC,UACjEC,EAAgBrB,SAASmB,eAAe,iBAE5CH,EAAQM,QAAQC,IACZA,EAAOH,SAAS,GAAGI,MAAMC,OAAS,QAGtC,MAAMC,EAAiBL,EAAcM,aAAeN,EAAcO,aAAe,GAEjFZ,EAAQM,QAAQC,IACZA,EAAOH,SAAS,GAAGI,MAAMC,OAASC,EAAiB,QAEzD,KAOFtC,WAAayC,IACTlK,KAAKwG,uBAAwB,IAAIC,MAAOC,UACxC2B,SAASmB,eAAe,iBAAiBW,UAAY,EACrDnK,KAAKuH,SAAS,CACVL,qBAAsBgD,KAE5B,KAEFE,kBAAqBC,IACjBrK,KAAKuH,SAAS,CAAEF,YAAagD,EAAMC,OAAOC,SAC5C,KAGFnB,gBAAkB,IAAgC,OAAzBpJ,KAAK+G,MAAM9B,UAAmC,KACvEuF,mBAAqB,IAAMxK,KAAK+G,MAAM9B,UAAUjF,KAAK+G,MAAMG,sBAAsB/C,SAAS,KAC1FsG,kBAAoB,IAAMzK,KAAK+G,MAAM9B,UAAUjF,KAAK+G,MAAMG,sBAAsBhC,QAAQ,KACxFwF,iBAAmBvK,GAAeH,KAAK+G,MAAMK,iBAAiBpH,KAAK+G,MAAMG,wBAA0B/G,EAAY,KAC/GwK,iBAAmB,IACf3K,KAAK+G,MAAMG,uBAAyBlH,KAAK+G,MAAM9B,UAAUW,OAAS,EAAC,KACvEgF,eAAiB,IACb5K,KAAK+G,MAAMG,uBAAyBlH,KAAK+G,MAAM9B,UAAUW,OAAS,QACDC,IAAjE7F,KAAK+G,MAAMK,iBAAiBpH,KAAK+G,MAAMG,sBAAoC,KAC/E2D,gBAAkB,IACd7K,KAAK+G,MAAMG,uBAAyBlH,KAAK+G,MAAM9B,UAAUW,OAAS,GACvC,KAA3B5F,KAAK+G,MAAMM,aACXrH,KAAK8K,UAAU9K,KAAK+G,MAAMM,aAAY,KAE1C0D,eAAiB,KAAM,EAAO,KAC9B5D,oBAAsB,KAEE,IAAIV,MAAOC,UADR,KAGgB1G,KAAKwG,sBApO5CxG,KAAK+G,MAAQ,CACT9B,UAAW,KACXvC,OAAQ,KACR0E,iBAAkB,GAClBF,qBAAsB,EACtBM,cAAc,EACdH,YAAa,IAIrB2D,qBACIhL,KAAKmJ,mBAEL7D,WAAW,KACPtF,KAAKmJ,oBACN,GAGP8B,oBACIC,OAAOC,iBAAiB,oBAAqB,IAAMnL,KAAKmJ,oBACxD+B,OAAOC,iBAAiB,SAAU,IAAMnL,KAAKmJ,oBAE7CiC,GAAiB,GAAOC,KAAKd,IACzBvK,KAAKuH,SAAS,CAAEtC,UAAWsF,GAAS,KAChCvK,KAAKmJ,uBAIbnJ,KAAKmJ,mBACL7D,WAAW,KACPtF,KAAKmJ,oBACN,GAGPtB,OAAOjC,GACH,IAAIlD,EAAS,GACb,MAAM4I,EAAa,iEACbC,EAAmBD,EAAW1F,OACpC,IAAI4F,EAAU,EACd,KAAOA,EAAU5F,GACblD,GAAU4I,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IACvDC,GAAW,EAOf,OAFA9I,EAASA,EAAS,IADA+D,KAAKoF,MAAMlL,SAAS,IAG/B+B,EAGX4E,MAAMwE,GAqCF,OApCgD,IAA5CtG,EAAcsG,GAAO3G,oBAAsC,IAAV2G,EACjDA,EAAQ,GAEO,IAAVA,EAEDA,EADuC,IAAvC9L,KAAK+G,MAAMK,iBAAiB0E,GACpB,GAEA,EAEG,IAAVA,EAEDA,EADuC,IAAvC9L,KAAK+G,MAAMK,iBAAiB0E,GACpB,EAEA,GAEG,KAAVA,EAEDA,EADuC,IAAvC9L,KAAK+G,MAAMK,iBAAiB0E,GACpB,GAEA,GAEG,KAAVA,EAEDA,EADuC,IAAvC9L,KAAK+G,MAAMK,iBAAiB0E,GACpB,GAEA,GAEG,KAAVA,EAEDA,EADuC,IAAvC9L,KAAK+G,MAAMK,iBAAiB0E,GACpB,GAEA,GAGZA,GAAS,EAENA,EAuGXhB,UAAUiB,GACN,OAAQC,MAAMD,IAAuB,KAAfA,EAAIE,QAAiBF,EAAM,EAuCrD3L,SACI,MAAM,QAAEC,GAAYL,KAAKC,MACzB,OACIR,IAAAa,cAACC,IAAgB,CAAClC,MAAOA,GAEjB2B,KAAK+G,MAAMS,aACPxE,EACIvD,IAAAa,cAAC4L,IAAK,CAACxL,GAAG,gBAAgBF,UAAWH,EAAQ+D,MAAO+H,UAAW,GAG1DnM,KAAKoJ,mBAA0C,MAArBpJ,KAAK+G,MAAMrE,OAClCjD,IAAAa,cAAA,WACK0C,EACGvD,IAAAa,cAAA,OAAK8L,IAAKpM,KAAKwK,sBACX/K,IAAAa,cAAC4D,EAAiB,CACdC,SAAUnE,KAAKwK,qBACfN,cAAelK,KAAK+G,MAAMG,qBAAuB,EACjDtE,gBAAiB5C,KAAK+G,MAAM9B,UAAUW,SAG1CnG,IAAAa,cAAA,OAAKE,UAAWH,EAAQ/B,iBACnB0B,KAAKyK,oBAAoB4B,IAAI,CAACC,EAAeR,IAC1CrM,IAAAa,cAACd,EAAM,CACHW,YAAa2L,EACbM,IAAKpM,KAAKwK,qBAAuBsB,EACjCvN,OAAQ+N,EACRxL,WAAYd,KAAK0K,iBAAiBoB,GAClC5L,eAAgBF,KAAK8I,qBAKjCrJ,IAAAa,cAAA,OAAKI,GAAG,oBACHV,KAAK2K,mBACA3H,EACEvD,IAAAa,cAACgD,IAAM,CACHC,QAAQ,YACR/C,UAAWH,EAAQ0E,UACnBhE,QAASf,KAAK2H,cACd/G,MAAM,WACT,WAIH,KAELZ,KAAK4K,iBACA5H,EACEvD,IAAAa,cAACgD,IAAM,CACHC,QAAQ,YACR/C,UAAWH,EAAQsE,QACnB5D,QAASf,KAAK4G,YACdhG,MAAM,WACT,SAIH,KAELZ,KAAK+K,iBACA/H,EACEvD,IAAAa,cAACgD,IAAM,CACHC,QAAQ,YACR/C,UACIR,KAAK2K,mBACCtK,EAAQyE,cACRzE,EAAQwE,QAElB9D,QAASf,KAAK0H,YACd9G,MAAM,WACT,SAIH,SAKA,OAAtBZ,KAAK+G,MAAMrE,OACXM,EACIvD,IAAAa,cAACiC,EAAM,CAACG,OAAQ1C,KAAK+G,MAAMrE,OAAQc,gBAAiBxD,KAAK4I,qBAG7DnJ,IAAAa,cAAC6F,EAAe,CAACiG,IAAK,oBAKjCpJ,EACGvD,IAAAa,cAAC4L,IAAK,CAACxL,GAAG,gBAAgBF,UAAWH,EAAQ+D,MAAO+H,UAAW,GAG1DnM,KAAKoJ,mBAA0C,MAArBpJ,KAAK+G,MAAMrE,OAClCjD,IAAAa,cAAA,WACK0C,EACGvD,IAAAa,cAAA,OAAK8L,IAAKpM,KAAKwK,sBACX/K,IAAAa,cAAC4D,EAAiB,CACdC,SAAUnE,KAAKwK,qBACfN,cAAelK,KAAK+G,MAAMG,qBAAuB,EACjDtE,gBAAiB5C,KAAK+G,MAAM9B,UAAUW,SAG1CnG,IAAAa,cAAA,OAAKE,UAAWH,EAAQ/B,iBACpBmB,IAAAa,cAAA,WACAb,IAAAa,cAAA,SAAO6H,KAAK,OAAOzH,GAAG,YAAY6J,MAAOvK,KAAK+G,MAAMM,YAAakF,SAAUvM,KAAKoK,oBAChF3K,IAAAa,cAAA,SAAOkM,QAAQ,aAAY,KAAS,KAGxC/M,IAAAa,cAAA,OAAKI,GAAG,oBACHV,KAAK2K,mBACA3H,EACEvD,IAAAa,cAACgD,IAAM,CACHC,QAAQ,YACR/C,UAAWH,EAAQ0E,UACnBhE,QAASf,KAAK2H,cACd/G,MAAM,WACT,WAIH,KAELZ,KAAK6K,kBACA7H,EACEvD,IAAAa,cAACgD,IAAM,CACHC,QAAQ,YACR/C,UAAWH,EAAQsE,QACnB5D,QAASf,KAAK4G,YACdhG,MAAM,WACT,SAIH,KAELZ,KAAK+K,iBACA/H,EACEvD,IAAAa,cAACgD,IAAM,CACHC,QAAQ,YACR/C,UACIR,KAAK2K,mBACCtK,EAAQyE,cACRzE,EAAQwE,QAElB9D,QAASf,KAAK0H,YACd9G,MAAM,WACT,SAIH,SAKA,OAAtBZ,KAAK+G,MAAMrE,OACXM,EACIvD,IAAAa,cAACiC,EAAM,CAACG,OAAQ1C,KAAK+G,MAAMrE,OAAQc,gBAAiBxD,KAAK4I,qBAG7DnJ,IAAAa,cAAC6F,EAAe,CAACiG,IAAK,sBAU3ClL,kBAAW9C,EAAX8C,CAAmBoF,G,MCvalC,MAAMmG,EAAcC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1B,KAAK+B,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBvG,QACfkG,UAAUC,cAAcO,YAI1B3K,QAAQC,IACN,iHAKEiK,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBtK,QAAQC,IAAI,sCAGRiK,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BQ,MAAMC,IACL/K,QAAQ+K,MAAM,4CAA6CA,KCxFjEC,IAAS1N,OAAOX,IAAAa,cAACgG,EAAG,MAAK+B,SAASmB,eAAe,SDc1C,SAAkBwD,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI1E,IAAIwF,6BAAwB7C,OAAOyB,SAASrE,MACpD0F,SAAW9C,OAAOyB,SAASqB,OAIvC,OAGF9C,OAAOC,iBAAiB,OAAQ,KAC9B,MAAM4B,EAAK,GAAAtK,OAAMsL,6BAAsB,sBAEnCtB,IAgEV,SAAiCM,EAAOC,GAEtCiB,MAAMlB,GACH1B,KAAK6C,IAEJ,MAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CtB,UAAUC,cAAcsB,MAAMnD,KAAK+B,IACjCA,EAAaqB,aAAapD,KAAK,KAC7BH,OAAOyB,SAAS+B,aAKpB5B,EAAgBC,EAAOC,KAG1BY,MAAM,KACL9K,QAAQC,IACN,mEArFA4L,CAAwB5B,EAAOC,GAI/BC,UAAUC,cAAcsB,MAAMnD,KAAK,KACjCvI,QAAQC,IACN,gHAMJ+J,EAAgBC,EAAOC,MCrC/BE,K","file":"static/js/main.f496f471.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/success.6e5e5bc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/failure.f7ea6e19.svg\";","const styles = theme => ({\n    answerContainer: {},\n    answer: {\n        margin: \"15px 5px 5px 10px\",\n        userSelect: \"none\"\n    },\n    answerTypography: {\n        fontSize: \"15px\",\n        display: \"inline-block\",\n        cursor: \"pointer\"\n    }\n});\n\nexport default styles;\n","import gray from \"@material-ui/core/colors/grey\";\nimport lightGreen from \"@material-ui/core/colors/lightGreen\";\n\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: lightGreen[200],\n            main: lightGreen[400],\n            dark: lightGreen[600],\n            contrastText: \"#fff\"\n        },\n        secondary: {\n            light: gray[200],\n            main: gray[500],\n            dark: gray[700],\n            contrastText: \"#fff\"\n        }\n    }\n});\n\nexport default theme;\n","import React from \"react\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { withStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\n\nimport styles from \"./answer-style\";\nimport theme from \"../../styles/theme\";\n\nclass Answer extends React.Component {\n    onAnswerClick = e => {\n        e.preventDefault();\n        this.props.onAnswerSelect(this.props.answerIndex);\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <MuiThemeProvider theme={theme}>\n                <div className={classes.answer}>\n                    <Radio\n                        id={this.props.answerIndex.toString()}\n                        color={\"primary\"}\n                        checked={this.props.isSelected}\n                        onClick={this.onAnswerClick}\n                    />\n                    <Typography className={classes.answerTypography} component=\"p\" onClick={this.onAnswerClick}>\n                        {this.props.answer}\n                    </Typography>\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withStyles(styles)(Answer);\n","import React from \"react\";\nimport { CSSTransitionGroup } from \"react-transition-group\";\n\nexport default elem => {\n    return (\n        <CSSTransitionGroup\n            transitionName=\"mainApp\"\n            transitionAppear={true}\n            transitionEnterTimeout={500}\n            transitionAppearTimeout={500}\n            transitionLeave={false}\n            transitionLeaveTimeout={500}\n        >\n            {elem}\n        </CSSTransitionGroup>\n    );\n};\n","const styles = theme => ({\n    svgContainer: {\n        width: \"90%\",\n        height: \"200px\",\n        margin: \"0 auto\",\n        border: \"1px\",\n        transform: \"translate(-50%, -50%)\",\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        userSelect: \"none\"\n    },\n    resultSVG: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: \"0 auto\"\n    },\n    resultParagraph: {\n        textAlign: \"center\"\n    },\n    resetButton: {\n        display: \"block\",\n        margin: \"60px auto\"\n    }\n});\n\nexport default styles;\n","import React from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\n\nimport addCssTransition from \"../../utils/css-transition\";\nimport questionStyle from \"./result-style\";\nimport theme from \"../../styles/theme\";\n\nimport successSvg from \"../../../assets/success.svg\";\nimport failureSvg from \"../../../assets/failure.svg\";\n\nclass Result extends React.Component {\n    getSuccessMessage = () => {\n        return `Passed!\\n ${this.props.result.correctAnswers} / ${this.props.result.questionsLength} correct`;\n    };\n\n    getFailMessage = () => {\n        return `Fail!\\n ${this.props.result.correctAnswers} / ${this.props.result.questionsLength} correct`;\n    };\n\n    render() {\n        const { classes } = this.props;\n        console.log(this.props);\n        return (\n            <MuiThemeProvider theme={theme}>\n                {addCssTransition(\n                    <div className={classes.svgContainer}>\n                        <img\n                            src={this.props.result.pass ? successSvg : failureSvg}\n                            className={classes.resultSVG}\n                            alt=\"logo\"\n                        />\n                        <pre className={classes.resultParagraph}>\n                            {this.props.result.pass ? this.getSuccessMessage() : this.getFailMessage()}\n                        </pre>\n\n                        <Button\n                            variant=\"contained\"\n                            className={classes.resetButton}\n                            onClick={this.props.tryAgainPressed}\n                            color=\"secondary\"\n                        >\n                            Try Again\n                        </Button>\n                    </div>\n                )}\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withStyles(questionStyle)(Result);\n","const styles = theme => ({\n    questionParagraph: {\n        font: \"-webkit-control\",\n        fontWeight: \"bold\",\n        fontSize: \"17px\",\n        marginBottom: \"0px\",\n        overflowX: \"auto\",\n        overflowY: \"hidden\",\n        marginTop: \"0px\"\n    },\n    questionNumber: {\n        marginTop: \"20px\",\n        marginBottom: \"10px\"\n    }\n});\n\nexport default styles;\n","import React from \"react\";\n\nimport addCssTransition from \"../../utils/css-transition\";\nimport { withStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\n\nimport questionStyle from \"./question-style\";\nimport theme from \"../../styles/theme\";\n\nclass QuestionParagraph extends React.Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <MuiThemeProvider theme={theme}>\n                {addCssTransition(\n                    <div>\n                        {/* <div className={classes.questionNumber}>\n                            {`Question ${this.props.questionIndex}/${this.props.questionsLength}:`}{\" \"}\n                        </div> */}\n                        <pre className={classes.questionParagraph}>{this.props.question}</pre>\n                    </div>\n                )}\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withStyles(questionStyle)(QuestionParagraph);\n","const styles = theme => ({\n    paper: {\n        userSelect: \"none\",\n        overflowX: \"hidden\",\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing(2),\n        paddingBottom: \"70px\",\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n        width: \"70%\",\n        height: \"75%\"\n    },\n    btnNext: {\n        margin: theme.spacing(),\n        marginTop: \"20px\",\n        position: \"absolute\",\n        right: 20\n    },\n    btnPrev: {\n        margin: theme.spacing(),\n        marginTop: \"20px\",\n        position: \"absolute\",\n        right: 100\n    },\n    btnPrevSubmit: {\n        margin: theme.spacing(),\n        marginTop: \"20px\",\n        position: \"absolute\",\n        right: 120\n    },\n    btnSubmit: {\n        margin: theme.spacing(),\n        marginTop: \"20px\",\n        position: \"absolute\",\n        right: 20\n    },\n    logo: {\n        userSelect: \"none\",\n        marginTop: \"2px\"\n    }\n});\n\nexport default styles;\n","const questions = [\n    {\n        // 0\n        question: `Your participation in this experiment is voluntary. Your responses will be kept anonymous.\nDo you consent to take part?\n        `,\n        answers: [\"Yes\"],\n        correctAnswerIndex: 0,\n    },\n    {\n        // 1\n        question: `Are you comfortable with the data being used for statistical or research purposes?\n    `,\n        answers: [\"Yes\"],\n        correctAnswerIndex: 0,\n    },\n    {\n        // 2\n        question: `Do you agree to answer the experiment questions truthfully and to the best of your ability?\n    `,\n        answers: [\"Yes\"],\n        correctAnswerIndex: 0,\n    },\n    {\n        // 3\n        question:\n`How many people (NOT including yourself) live in your home?`,\n        answers:[\n\n        ],\n        correctAnswerIndex: 1,\n    },\n    {\n        // 4\n        question:\n`Which category best describes your yearly household income before taxes? Include all income received from employment, social \nsecurity, support from children or other family, welfare, bank interest, retirement accounts, rental property, investments, etc.`,\n        answers:[\n            \"Less than Rs. 6 Lakhs\",\n            \"Rs. 6 Lakhs to 9 Lakhs\",\n            \"Rs. 9 Lakhs to 12 Lakhs\",\n            \"Rs. 12 Lakhs to 15 Lakhs\",\n            \"More than Rs. 15 Lakhs\",\n        ],\n        correctAnswerIndex: 0,\n    },\n    {\n        // 5\n        question:\n`Do you (or your family) OWN your own home now (includes paying a mortgage)?`,\n        answers:[\n            \"Yes\",\n            \"No\",\n        ],\n        correctAnswerIndex: 0,\n    },\n    {\n        // 6\n        question:\n`Do you (or your family) OWN a working motor vehicle (car, truck, van, SUV) now?`,\n        answers:[\n            \"Yes\",\n            \"No\",\n        ],\n        correctAnswerIndex: 0,\n    },\n    {\n        // 7\n        question: `You are a final year student actively seeking placement opportunities in reputable companies.\nIt's a pivotal moment and you recognize the significance of choosing a career options that aligns with your skills and interests\nso that you can continue with it without any issues in the future as well.\n\nWhich of the following two roles would you say are more suited to your passion and interests?\n    `,\n        answers: [\n            \"Software Development Engineer (SDE)\",\n            \"Research\",\n        ],\n        correctAnswerIndex: 0,\n    },\n    {\n        // 8\n        // Passion - Research\n        question: `The placement season is closing in, but you have managed to land yourself 2 placement offers in the same company. The choice is\nnow yours to make. One of the offers is for the Research position, and offers a salary of 25 Lakhs per annum and the other is that\nof an SDE with a salary of 40 Lakhs per annum.\n\nWhich job would you prefer to take?\n    `,\n        answers: [\n            \"Research\",\n            \"SDE\",\n        ],\n        correctAnswerIndex: 0,\n    },\n    {\n        // 9\n        // Passion - Research, Choice - Research\n        //Submit\n        question: `\nYou choose to follow the path of your passion and are satisfied with your decision when a close friend asks you about your choice.\nYour friend wants to know what is the minimum salary (in Lakhs) that SDE must have offered for you to have considered it over\nresearch (preferred job alignment)?  \n    `,\n        answers: [\n            \n        ],\n        correctAnswerIndex: 1\n    },\n    {\n        // 10\n        // Passion - Research, Choice - SDE\n        // Yes - Submit\n        question: `\nYou choose to follow the path of greater financial gain and are satisfied with your decision when a senior in the company gives you\ncrucial information. You are told that the research position's salary ends up matching the SDE position's pay after a period of 2\nyears. Will you switch your decision? \n    `,\n        answers: [\n            \"Yes\",\n            \"No\"\n        ],\n        correctAnswerIndex: 0\n    },\n    {\n        // 11\n        // Passion - Research, Choice - SDE,, Switch - No\n        // Submit\n        question: `\nYour senior is curious about your decision and wants to know what would have gotten you to make a decision switch. He asks you\nwhat would be the maximum duration (in months) in which the pay must become equal for you to choose research\n(your preferred job) over SDE? \n    `,\n        answers: [\n            \n        ],\n        correctAnswerIndex: 1\n    },\n    {\n        // 12\n        // Passion - SDE\n        question: `The placement season is closing in, but you have managed to land yourself 2 placement offers in the same company. The choice is\nnow yours to make. One of the offers is for the SDE position, and offers a salary of 25 Lakhs per annum and the other is that\nof a Research position with a salary of 40 Lakhs per annum.\n\nWhich job would you prefer to take?\n    `,\n        answers: [\n            \"Research\",\n            \"SDE\",\n        ],\n        correctAnswerIndex: 0,\n    },\n    {\n        // 13\n        // Passion - SDE, Choice - SDE\n        //Submit\n        question: `\nYou choose to follow the path of your passion and are satisfied with your decision when a close friend asks you about your choice.\nYour friend wants to know what is the minimum salary (in Lakhs) that Research must have offered for you to have considered it over\nSDE (preferred job alignment)?  \n    `,\n        answers: [\n            \n        ],\n        correctAnswerIndex: 1\n    },\n    {\n        // 14\n        // Passion - SDE, Choice - Research\n        // Yes - Submit\n        question: `\nYou choose to follow the path of greater financial gain and are satisfied with your decision when a senior in the company gives you\ncrucial information. You are told that the SDE position's salary ends up matching the Research position's pay after a period of 2\nyears. Will you switch your decision? \n    `,\n        answers: [\n            \"Yes\",\n            \"No\"\n        ],\n        correctAnswerIndex: 0\n    },\n    {\n        // 15\n        // Passion - SDE, Choice - Research,, Switch - No\n        // Submit\n        question: `\nYour senior is curious about your decision and wants to know what would have gotten you to make a decision switch. He asks you\nwhat would be the maximum duration (in months) in which the pay must become equal for you to choose SDE (your preferred job)\nover research? \n    `,\n        answers: [\n            \n        ],\n        correctAnswerIndex: 1\n    },\n    {\n        // 16\n        // Submission\n        question: `\nThanks for going through our experiment. Please click on the submit button to download your results.\n    `,\n        answers: [\n           \n        ],\n        correctAnswerIndex: 0\n    },\n];\n\nexport default questions;\n","import questionsData from \"./data/questionsData\";\n// import getRandomInt from \"../../../../utils/random-int\";\n\nexport default () => {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            const questionsLength = 17;\n            const questions = [];\n\n            for (let i = 0; i < questionsLength; i++) {\n                const question = {\n                    question: questionsData[i].question,\n                    answers: questionsData[i].answers,\n                    i\n                };\n\n                questions.push(question);\n            }\n\n            resolve(\n                questions\n                // questionsData.map((question, questionIndex) => {\n                //     return {\n                //         questionIndex,\n                //         question: question.question,\n                //         answers: question.answers\n                //     };\n                // })\n            );\n        }, 1500);\n    });\n};\n","import LocalQuestions from \"../services/questions/local/get-questions\";\n\nconst getQuestions = (server = null) => {\n    if (server) {\n        // TODO:\n        // implement\n    } else {\n        return LocalQuestions();\n    }\n};\n\nexport default getQuestions;\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { makeStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\n\nimport theme from \"../styles/theme\";\n\nconst useStyles = makeStyles(theme => ({\n    progress: {\n        margin: theme.spacing(2)\n    },\n    progressContainer: {\n        position: \"absolute\",\n        top: \"60%\",\n        left: \"50%\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\"\n    }\n}));\n\nfunction CircularLoading() {\n    const classes = useStyles();\n\n    return (\n        <MuiThemeProvider theme={theme}>\n            <div className={classes.progressContainer}>\n                <CircularProgress size={200} className={classes.progress} />\n            </div>\n        </MuiThemeProvider>\n    );\n}\n\nexport default CircularLoading;\n","import React from \"react\";\n// import * as fs from \"fs\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport Answer from \"./components/Answer/Answer\";\nimport Result from \"./components/Result/Result\";\nimport QuestionParagraph from \"./components/Question/Question.js\";\nimport addCssTransition from \"./utils/css-transition\";\nimport { withStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\n\n// import logo from \"../assets/logo.svg\";\nimport theme from \"./styles/theme\";\nimport styles from \"./app-style\";\nimport questionsFactory from \"./models/factories/get-questions-factory\";\n// import submitFactory from \"./models/factories/submit-questions-factory\";\n\nimport CircularLoading from \"./components/CircularLoading\";\n\nimport getQuestions from \"./models/services/questions/local/get-questions\";\n\nimport questionsData from \"./models/services/questions/local/data/questionsData.js\";\n\nclass App extends React.Component {\n    lastTimeButtonClicked = new Date().getTime();\n    jsonOutput = {\n\n    }\n\n    constructor(props) {\n        super(props);\n\n        // State initialization\n        this.state = {\n            questions: null,\n            result: null,\n            questionsAnswers: [],\n            currentQuestionIndex: 0,\n            showMultiple: true,\n            input_value: \"\",\n        };\n    }\n\n    componentDidUpdate() {\n        this.updateButtonsPos();\n\n        setTimeout(() => {\n            this.updateButtonsPos();\n        }, 0);\n    }\n\n    componentDidMount() {\n        window.addEventListener('orientationchange', () => this.updateButtonsPos());\n        window.addEventListener('resize', () => this.updateButtonsPos());\n\n        questionsFactory(false).then(value => {\n            this.setState({ questions: value }, () => {\n                this.updateButtonsPos();\n            });\n        });\n\n        this.updateButtonsPos();\n        setTimeout(() => {\n            this.updateButtonsPos();\n        }, 0);\n    }\n\n    makeid(length) {\n        let result = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        const charactersLength = characters.length;\n        let counter = 0;\n        while (counter < length) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n            counter += 1;\n        }\n\n        // Add a unique encoded type for the current date and time\n        const timestamp = Date.now().toString(36);\n        result = result + \"_\" + timestamp;\n\n        return result;\n    }\n\n    route(index) {\n        if (questionsData[index].correctAnswerIndex === 1 && index !== 3) {\n            index = 16;\n        }\n        else if (index === 7) {\n            if (this.state.questionsAnswers[index] === 0)\n                index = 12;\n            else\n                index = 8;\n        }\n        else if (index === 8) {\n            if (this.state.questionsAnswers[index] === 0)\n                index = 9;\n            else\n                index = 10;\n        }\n        else if (index === 10) {\n            if (this.state.questionsAnswers[index] === 0)\n                index = 16;\n            else\n                index = 11;\n        }\n        else if (index === 12) {\n            if (this.state.questionsAnswers[index] === 0)\n                index = 14;\n            else\n                index = 13;\n        }\n        else if (index === 14) {\n            if (this.state.questionsAnswers[index] === 0)\n                index = 16;\n            else\n                index = 15;\n        }\n        else {\n            index += 1;\n        }\n        return index;\n    }\n\n    onNextClick = e => {\n        let thisTime = new Date().getTime();\n        const currentState = this.state;\n        const timeDiff = (thisTime - this.lastTimeButtonClicked) / 1000;\n        let timestring = currentState.currentQuestionIndex + \"_time\";\n        if (currentState.currentQuestionIndex === currentState.questions.length - 1 || this.areButtonsAnimating()) {\n            return;\n        }\n        // console.log(this.state.questionsAnswers[this.state.currentQuestionIndex]);\n        if (questionsData[currentState.currentQuestionIndex].correctAnswerIndex === 0)\n            this.jsonOutput[currentState.currentQuestionIndex] = this.state.questionsAnswers[this.state.currentQuestionIndex];\n        else\n            this.jsonOutput[currentState.currentQuestionIndex] = this.state.input_value;\n        this.jsonOutput[timestring] = timeDiff;\n        currentState.currentQuestionIndex = this.route(currentState.currentQuestionIndex);\n        this.setState({ \"input_value\": \"\" });\n        if (questionsData[currentState.currentQuestionIndex].correctAnswerIndex === 0)\n            this.setState({ showMultiple: true })\n        else\n            this.setState({ showMultiple: false })\n        // console.log(this.jsonOutput);\n        this.updatePage(currentState.currentQuestionIndex);\n    };\n\n    onPrevClick = e => {\n        const currentState = this.state;\n\n        if (currentState.currentQuestionIndex === 0 || this.areButtonsAnimating()) {\n            return;\n        }\n\n        this.updatePage(--currentState.currentQuestionIndex);\n    };\n\n    onSubmitClick = e => {\n        // const currentState = this.state;\n\n        // this.setState({\n        //     questions: null,\n        //     questionsAnswers: [],\n        //     currentQuestionIndex: 0\n        // });\n        let getRandomId = this.makeid(25);\n        getRandomId += \".json\";\n        const jsonString = JSON.stringify(this.jsonOutput, null, 2);\n        const blob = new Blob([jsonString], { type: 'application/json' });\n        const downloadLink = document.createElement('a');\n        downloadLink.href = URL.createObjectURL(blob);\n        downloadLink.download = getRandomId;\n        downloadLink.click();\n        URL.revokeObjectURL(downloadLink.href);\n        // let result = await submitFactory(null, currentState.questions, currentState.questionsAnswers);\n        // this.setState({\n        //     result\n        // });\n    };\n\n    onTryAgainPressed = async () => {\n        this.setState({\n            questions: null,\n            questionsAnswers: [],\n            currentQuestionIndex: 0,\n            result: null\n        });\n\n        this.setState({\n            questions: await getQuestions()\n        })\n    };\n\n    onAnswerSelected = answerId => {\n        let clickedAnswerIndex = answerId;\n        let currentState = this.state;\n        const currentAnswers = this.state.questionsAnswers;\n        currentAnswers[currentState.currentQuestionIndex] = clickedAnswerIndex;\n\n        this.setState({\n            userAnswerIndexes: currentAnswers\n        });\n    };\n\n    updateButtonsPos = () => {\n        if (!this.questionsLoaded()) {\n            return false;\n        }\n\n        let buttons = Array.from(document.getElementById(\"buttonsContainer\").children);\n        let mainContainer = document.getElementById(\"mainContainer\");\n\n        buttons.forEach(button => {\n            button.children[0].style.bottom = \"0px\";\n        });\n\n        const bottomPosition = mainContainer.clientHeight - mainContainer.scrollHeight + 20;\n\n        buttons.forEach(button => {\n            button.children[0].style.bottom = bottomPosition + \"px\";\n        });\n    };\n\n    isNumeric(num) {\n        return !isNaN(num) && num.trim() !== \"\" && num > 0;\n    }\n\n\n    updatePage = questionIndex => {\n        this.lastTimeButtonClicked = new Date().getTime();\n        document.getElementById(\"mainContainer\").scrollTop = 0;\n        this.setState({\n            currentQuestionIndex: questionIndex\n        });\n    };\n\n    handleInputChange = (event) => {\n        this.setState({ input_value: event.target.value });\n    };\n\n\n    questionsLoaded = () => (this.state.questions !== null ? true : false);\n    getCurrentQuestion = () => this.state.questions[this.state.currentQuestionIndex].question;\n    getCurrentAnswers = () => this.state.questions[this.state.currentQuestionIndex].answers;\n    isAnswerSelected = answerIndex => this.state.questionsAnswers[this.state.currentQuestionIndex] === answerIndex;\n    shouldShowSubmit = () =>\n        this.state.currentQuestionIndex === this.state.questions.length - 1\n    shouldShowNext = () =>\n        this.state.currentQuestionIndex !== this.state.questions.length - 1 &&\n        this.state.questionsAnswers[this.state.currentQuestionIndex] !== undefined;\n    shouldShowNext2 = () =>\n        this.state.currentQuestionIndex !== this.state.questions.length - 1 &&\n        this.state.input_value !== \"\" &&\n        this.isNumeric(this.state.input_value)\n\n    shouldShowPrev = () => false; // this.state.currentQuestionIndex !== 0;\n    areButtonsAnimating = () => {\n        const transitionTime = 600;\n        const currentTime = new Date().getTime();\n\n        return currentTime - transitionTime <= this.lastTimeButtonClicked;\n    };\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <MuiThemeProvider theme={theme}>\n                {\n                    this.state.showMultiple ? (\n                        addCssTransition(\n                            <Paper id=\"mainContainer\" className={classes.paper} elevation={2}>\n                                {/* <img key={\"logo\"} src={logo} className={classes.logo} alt=\"logo\" /> */}\n                                {/* <hr key={\"horizontalLine\"} width={\"100%\"} /> */}\n                                {this.questionsLoaded() && this.state.result == null ? (\n                                    <div>\n                                        {addCssTransition(\n                                            <div key={this.getCurrentQuestion()}>\n                                                <QuestionParagraph\n                                                    question={this.getCurrentQuestion()}\n                                                    questionIndex={this.state.currentQuestionIndex + 1}\n                                                    questionsLength={this.state.questions.length}\n                                                />\n\n                                                <div className={classes.answerContainer}>\n                                                    {this.getCurrentAnswers().map((currentAnswer, index) => (\n                                                        <Answer\n                                                            answerIndex={index}\n                                                            key={this.getCurrentQuestion() + index}\n                                                            answer={currentAnswer}\n                                                            isSelected={this.isAnswerSelected(index)}\n                                                            onAnswerSelect={this.onAnswerSelected}\n                                                        />\n                                                    ))}\n                                                </div>\n\n                                                <div id=\"buttonsContainer\">\n                                                    {this.shouldShowSubmit()\n                                                        ? addCssTransition(\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                className={classes.btnSubmit}\n                                                                onClick={this.onSubmitClick}\n                                                                color=\"primary\"\n                                                            >\n                                                                Submit\n                                                            </Button>\n                                                        )\n                                                        : null}\n\n                                                    {this.shouldShowNext()\n                                                        ? addCssTransition(\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                className={classes.btnNext}\n                                                                onClick={this.onNextClick}\n                                                                color=\"primary\"\n                                                            >\n                                                                Next\n                                                            </Button>\n                                                        )\n                                                        : null}\n\n                                                    {this.shouldShowPrev()\n                                                        ? addCssTransition(\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                className={\n                                                                    this.shouldShowSubmit()\n                                                                        ? classes.btnPrevSubmit\n                                                                        : classes.btnPrev\n                                                                }\n                                                                onClick={this.onPrevClick}\n                                                                color=\"primary\"\n                                                            >\n                                                                Prev\n                                                            </Button>\n                                                        )\n                                                        : null}\n                                                </div>\n                                            </div>\n                                        )}\n                                    </div>\n                                ) : this.state.result !== null ? (\n                                    addCssTransition(\n                                        <Result result={this.state.result} tryAgainPressed={this.onTryAgainPressed} />\n                                    )\n                                ) : (\n                                    <CircularLoading key={\"loadingCircle\"} />\n                                )}\n                            </Paper>\n                        ))\n                        :\n                        (addCssTransition(\n                            <Paper id=\"mainContainer\" className={classes.paper} elevation={2}>\n                                {/* <img key={\"logo\"} src={logo} className={classes.logo} alt=\"logo\" /> */}\n                                {/* <hr key={\"horizontalLine\"} width={\"100%\"} /> */}\n                                {this.questionsLoaded() && this.state.result == null ? (\n                                    <div>\n                                        {addCssTransition(\n                                            <div key={this.getCurrentQuestion()}>\n                                                <QuestionParagraph\n                                                    question={this.getCurrentQuestion()}\n                                                    questionIndex={this.state.currentQuestionIndex + 1}\n                                                    questionsLength={this.state.questions.length}\n                                                />\n\n                                                <div className={classes.answerContainer}>\n                                                    <br />\n                                                    <input type=\"text\" id=\"textInput\" value={this.state.input_value} onChange={this.handleInputChange} />\n                                                    <label htmlFor=\"textInput\">:</label>'\n                                                </div>\n\n                                                <div id=\"buttonsContainer\">\n                                                    {this.shouldShowSubmit()\n                                                        ? addCssTransition(\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                className={classes.btnSubmit}\n                                                                onClick={this.onSubmitClick}\n                                                                color=\"primary\"\n                                                            >\n                                                                Submit\n                                                            </Button>\n                                                        )\n                                                        : null}\n\n                                                    {this.shouldShowNext2()\n                                                        ? addCssTransition(\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                className={classes.btnNext}\n                                                                onClick={this.onNextClick}\n                                                                color=\"primary\"\n                                                            >\n                                                                Next\n                                                            </Button>\n                                                        )\n                                                        : null}\n\n                                                    {this.shouldShowPrev()\n                                                        ? addCssTransition(\n                                                            <Button\n                                                                variant=\"contained\"\n                                                                className={\n                                                                    this.shouldShowSubmit()\n                                                                        ? classes.btnPrevSubmit\n                                                                        : classes.btnPrev\n                                                                }\n                                                                onClick={this.onPrevClick}\n                                                                color=\"primary\"\n                                                            >\n                                                                Prev\n                                                            </Button>\n                                                        )\n                                                        : null}\n                                                </div>\n                                            </div>\n                                        )}\n                                    </div>\n                                ) : this.state.result !== null ? (\n                                    addCssTransition(\n                                        <Result result={this.state.result} tryAgainPressed={this.onTryAgainPressed} />\n                                    )\n                                ) : (\n                                    <CircularLoading key={\"loadingCircle\"} />\n                                )}\n                            </Paper>\n                        ))\n                }\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\n// eslint-disable-next-line no-unused-vars\nimport MainCss from './main.css'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}